							Pascal's Triangle
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>>Ans;
        for(int i=0;i<numRows;i++)
        {
            vector<int>row;
            for(int j=0;j<=i;j++)
            {
                if(j==0 || j==i)
                {
                    row.push_back(1);
                }
                else
                    row.push_back(Ans[i-1][j]+Ans[i-1][j-1]);  
            }
            Ans.push_back(row);
        }
        return Ans;
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
							Remove Duplicates from Sorted Array
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    int removeDuplicates(vector<int>& nums) {
        int ans=1;
        int n=nums.size();
        for(int i=1;i<n;i++)
        {
            if(nums[i-1]!=nums[i])
            {
                nums[ans]=nums[i];
                ans++;
            }
        }
        return ans;
    }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
							Merge Intervals
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>>ans;
        sort(intervals.begin(),intervals.end());
        int start=intervals[0][0],end=intervals[0][1];
        for(int i=1;i<intervals.size();i++)
        {
            if(intervals[i][0]<=end) 
                end=max(end,intervals[i][1]);
            else{
                ans.push_back({start,end});
                start=intervals[i][0];
                end=intervals[i][1];
            }
        }
        ans.push_back({start,end});
        return ans;
    }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
							3Sum
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vector<vector<int>> threeSum(vector<int>& nums) {
   int n=nums.size();
   int sum=0;
   vector<vector<int>>ans;
   sort(nums.begin(),nums.end());
   int start=1,end=n-1;
   if(n<3) return ans; 
   for(int i=0;i<n-2;i++)
   {
     if(i>0 && nums[i]==nums[i-1]) continue;
     start=i+1;
     end=n-1;
     while(start<end)
     {
       if(nums[start]+nums[end]+nums[i]==0)
       {    
            ans.push_back({nums[i],nums[start],nums[end]});
            start++;
            while(nums[start]==nums[start-1] && start<end) start++;
       }
       else if(nums[start]+nums[end]+nums[i]>0)
       {
            end--;
       }
       else
       {
            start++;
       }
     }
   }
   return ans;
 }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 