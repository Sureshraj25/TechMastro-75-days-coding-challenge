								Squares of a Sorted Array
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vector<int> sortedSquares(vector<int>& nums) {
        int N=nums.size();
        int start=0,end=N-1;
        int left_square=0,right_square=0,i=end;
        vector<int>Ans(N);
        while(start<=end)
        {
            left_square=(nums[start]*nums[start]);
            right_square=(nums[end]*nums[end]);
            if(left_square<right_square)
            {
                Ans[i]=right_square;
                end--;
            }
            else
            {
                Ans[i]=left_square;
                start++;
            }
            i--;
        }
        return Ans;
    }
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
								Best Time to Buy and Sell Stock II	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////								
int maxProfit(vector<int>& prices) {
         int profit=0,max_profit=0;
         if(prices.size()<2) return 0;
         for(int i=1;i<prices.size();i++)
         {
             if(prices[i]>prices[i-1]){
                 profit=prices[i]-prices[i-1];
                 max_profit+=profit;
             }
         }
        return max_profit;
    }								
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
								Find Pivot Index
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    int pivotIndex(vector<int>& nums) {
        int left_sum=0,right_sum=0;
        for(int i=1;i<nums.size();i++)
        {
            right_sum+=nums[i];
        }
        if(left_sum==right_sum) return 0;
        for(int i=1;i<nums.size();i++)
        {
            left_sum+=nums[i-1];
            right_sum-=nums[i];
            if(left_sum==right_sum)
            {
                return i;
            }
        }
        return -1;
    }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
								 Majority Element
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    int majorityElement(vector<int>& nums) {
        
        int count=1;
        int me=nums[0];
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]==me)
            {
                count++;
            }
            else
            {
                if(count==0)
                {
                    me=nums[i];
                    count=1;
                }
                else
                    count--;
            }
        }
        count=0;
        for(int i=0;i<nums.size();i++)
        {
            if(me==nums[i])
                count++;
        }
        return me; 
    }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	